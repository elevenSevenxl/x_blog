const s=JSON.parse(`{"key":"v-4d8fb10a","path":"/vue/watchEffect.html","title":"watchEffect","lang":"zh-CN","frontmatter":{"title":"watchEffect","cover":"/assets/images/cover19.jpg","isTimeLine":true,"date":"2023-09-06T00:00:00.000Z","footer":"<a href=\\"https://icp.gov.moe/?keyword=20231319\\" target=\\"_blank\\">萌 ICP 备 20231319 号</a>","copyright":"Copyright © 2023 没有蜡笔的小新","category":["前端"],"tag":["vue3"],"description":"立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。 如果用到 message 就只会监听 message 就是用到几个监听几个 而且是非惰性 会默认调用一次 let message = ref&lt;string&gt;('') let message2 = ref&lt;string&gt;('') watchEffect(() =&gt; { //console.log('message', message.value); console.log('message2', message2.value) }) // 清除副作用 // 就是在触发监听之前会调用一个函数可以处理你的逻辑例如防抖 import { watchEffect, ref } from 'vue' let message = ref&lt;string&gt;('') let message2 = ref&lt;string&gt;('') watchEffect(oninvalidate =&gt; { //console.log('message', message.value); oninvalidate(() =&gt; {}) console.log('message2', message2.value) }) // 停止跟踪 watchEffect 返回一个函数 调用之后将停止更新 const stop = watchEffect( oninvalidate =&gt; { //console.log('message', message.value); oninvalidate(() =&gt; {}) console.log('message2', message2.value) }, { flush: 'post', onTrigger() {} } ) stop()","head":[["meta",{"property":"og:url","content":"https://elevenSevenxl.github.io/x_blog/vue/watchEffect.html"}],["meta",{"property":"og:site_name","content":"木兮blog"}],["meta",{"property":"og:title","content":"watchEffect"}],["meta",{"property":"og:description","content":"立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。 如果用到 message 就只会监听 message 就是用到几个监听几个 而且是非惰性 会默认调用一次 let message = ref&lt;string&gt;('') let message2 = ref&lt;string&gt;('') watchEffect(() =&gt; { //console.log('message', message.value); console.log('message2', message2.value) }) // 清除副作用 // 就是在触发监听之前会调用一个函数可以处理你的逻辑例如防抖 import { watchEffect, ref } from 'vue' let message = ref&lt;string&gt;('') let message2 = ref&lt;string&gt;('') watchEffect(oninvalidate =&gt; { //console.log('message', message.value); oninvalidate(() =&gt; {}) console.log('message2', message2.value) }) // 停止跟踪 watchEffect 返回一个函数 调用之后将停止更新 const stop = watchEffect( oninvalidate =&gt; { //console.log('message', message.value); oninvalidate(() =&gt; {}) console.log('message2', message2.value) }, { flush: 'post', onTrigger() {} } ) stop()"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://elevenSevenxl.github.io/x_blog/assets/images/cover19.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-18T08:41:20.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"watchEffect"}],["meta",{"property":"article:author","content":"没有蜡笔的小新"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:published_time","content":"2023-09-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-18T08:41:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"watchEffect\\",\\"image\\":[\\"https://elevenSevenxl.github.io/x_blog/assets/images/cover19.jpg\\"],\\"datePublished\\":\\"2023-09-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-18T08:41:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"没有蜡笔的小新\\",\\"url\\":\\"https://elevenSevenxl.github.io/x_blog\\"}]}"]]},"headers":[],"git":{"createdTime":1694006388000,"updatedTime":1695026480000,"contributors":[{"name":"sunyxl","email":"39620856+elevenSevenxl@users.noreply.github.com","commits":1},{"name":"yxl","email":"1551536781@qq.com","commits":1}]},"readingTime":{"minutes":1.04,"words":311},"filePathRelative":"vue/watchEffect.md","localizedDate":"2023年9月6日","excerpt":"<hr>\\n<p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p>\\n<p>如果用到 message 就只会监听 message 就是用到几个监听几个 而且是非惰性 会默认调用一次</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">let</span> message <span class=\\"token operator\\">=</span> ref<span class=\\"token operator\\">&lt;</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> message2 <span class=\\"token operator\\">=</span> ref<span class=\\"token operator\\">&lt;</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">watchEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//console.log('message', message.value);</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message2'</span><span class=\\"token punctuation\\">,</span> message2<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 清除副作用</span>\\n<span class=\\"token comment\\">// 就是在触发监听之前会调用一个函数可以处理你的逻辑例如防抖</span>\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> watchEffect<span class=\\"token punctuation\\">,</span> ref <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'vue'</span>\\n<span class=\\"token keyword\\">let</span> message <span class=\\"token operator\\">=</span> ref<span class=\\"token operator\\">&lt;</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> message2 <span class=\\"token operator\\">=</span> ref<span class=\\"token operator\\">&lt;</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">''</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">watchEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">oninvalidate</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token comment\\">//console.log('message', message.value);</span>\\n  <span class=\\"token function\\">oninvalidate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message2'</span><span class=\\"token punctuation\\">,</span> message2<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 停止跟踪 watchEffect 返回一个函数 调用之后将停止更新</span>\\n\\n<span class=\\"token keyword\\">const</span> stop <span class=\\"token operator\\">=</span> <span class=\\"token function\\">watchEffect</span><span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token parameter\\">oninvalidate</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//console.log('message', message.value);</span>\\n    <span class=\\"token function\\">oninvalidate</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'message2'</span><span class=\\"token punctuation\\">,</span> message2<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">flush</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'post'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function\\">onTrigger</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">stop</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{s as data};
