import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as o,a as n,b as e,e as s,f as p}from"./app-8ead0344.js";const l="/assets/content2-44709544.gif",d="/assets/content3-2948ae75.gif",r="/assets/content4-5bb59474.gif",u="/assets/content5-d2b5a6a3.gif",m="/assets/content6-25696ea8.gif",g="/assets/content7-728275ac.gif",v="/assets/content8-27f5c34d.gif",f="/assets/content9-8155cc4f.gif",b="/assets/content9-8155cc4f.gif",h="/assets/content11-f911431b.gif",x="/assets/content12-49997b24.gif",k="/assets/content13-e05a76ca.gif",_="/assets/content14-3a64fced.gif",y={},w=p('<p>现代 <code>CSS</code> 布局使开发人员只需按几下键就可以编写十分有意义且强大的样式规则。上面的讨论和接下来的帖文研究了 10 种强大的 <code>CSS</code> 布局，它们实现了一些非凡的工作。</p><h4 id="_01-超级居中-place-items-center" tabindex="-1"><a class="header-anchor" href="#_01-超级居中-place-items-center" aria-hidden="true">#</a> 01. 超级居中：place-items: center</h4><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于第一个“单行”布局，让我们解决所有 <code>CSS</code> 领域中最大的谜团：居中。我想让您知道，使用 place-items: center 会让此操作比您想象的容易。</p><p>首先指定 grid 作为 display 方法，然后在同一个元素上写入 place-items: center。place-items 是同时设置 align-items 和 justify-items 的快速方法。通过将其设置为 center ， align-items 和 justify-items 都将设置为 center。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">place-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这使得内容能够在父级内完美居中，而不管内部大小。</p><h4 id="_02-解构煎饼式布局-flex-grow-shrink-basewidth" tabindex="-1"><a class="header-anchor" href="#_02-解构煎饼式布局-flex-grow-shrink-basewidth" aria-hidden="true">#</a> 02. 解构煎饼式布局：flex: <code>&lt;grow&gt;</code> <code>&lt;shrink&gt;</code> <code>&lt;baseWidth&gt;</code></h4><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来我们有解构的煎饼！这是营销网站的常见布局，例如，可能有一行 3 个项目，通常带有图像、标题，然后是一些描述产品某些功能的文本。在移动设备上，我们希望它们能够很好地堆叠，并随着我们增加屏幕尺寸而扩展。</p><p>通过使用 <code>Flexbox</code> 实现此效果，您不需要在屏幕尺寸发生变化时通过媒体查询来调整这些元素的位置。</p><p>flex 简写代表：flex: <code>&lt;flex-grow&gt;</code> <code>&lt;flex-shrink&gt;</code> <code>&lt;flex-basis&gt;</code> 。</p><p>正因为如此，如果您想让您的框填充到它们的 <code>&lt;flex-basis&gt;</code> 大小，缩小到更小的尺寸，但不拉伸以填充任何额外的空间，请写入：flex: 0 1 <code>&lt;flex-basis&gt;</code> 。在这种情况下，您的 <code>&lt;flex-basis&gt;</code> 是 <code>150px</code>，所以应该是这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.parent {
  display: flex;
}

.child {
  flex: 0 1 150px;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果您确实希望框在换到下一行时拉伸并填充空间，请将 <code>&lt;flex-grow&gt;</code> 设置为 1 ，所以应该是这样：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.child</span> <span class="token punctuation">{</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在，当您增加或减少屏幕尺寸时，这些 flex 项目会缩小和增长。</p><h4 id="_03-侧边栏布局-grid-template-columns-minmax-min-max" tabindex="-1"><a class="header-anchor" href="#_03-侧边栏布局-grid-template-columns-minmax-min-max" aria-hidden="true">#</a> 03. 侧边栏布局：grid-template-columns: <code>minmax</code>(<code>&lt;min&gt;</code>, <code>&lt;max&gt;</code>) …</h4><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此演示对网格布局利用了 <code>minmax </code>函数。我们在这里做的是将最小侧边栏大小设置为 <code>150px</code> ，但在更大的屏幕上，让它伸展出 25% 。侧边栏将始终占据其父级水平空间的 25%，直到 25% 变得小于 <code>150px</code> 。</p><p>将以下值添加为 grid-template-columns 的值：<code>minmax(150px, 25%) 1fr</code> 。在第一列（在这种情况下，侧边栏）的项目其 <code>minmax</code> 为 <code>150px</code>（在 25% ），第二列项目（这里指 main 部分）占据其余的空间作为单一的 <code>1fr </code>轨道。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">minmax</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> 25%<span class="token punctuation">)</span> 1fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_04-煎饼堆栈布局-grid-template-rows-auto-1fr-auto" tabindex="-1"><a class="header-anchor" href="#_04-煎饼堆栈布局-grid-template-rows-auto-1fr-auto" aria-hidden="true">#</a> 04. 煎饼堆栈布局：<code>grid-template-rows: auto 1fr auto</code></h4><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>与 <code>Deconstructed Pancake</code> 不同，当屏幕尺寸改变时，本例不会包含它的子元素。通常称为粘性页脚，这种布局通常用于网站和应用程序，跨多个移动应用程序（页脚通常是工具栏）和网站（单页应用程序通常使用这种全局布局）。</p><p>向组件添加 display: grid 将为您提供一个单列网格，但是主区域的高度将仅与页脚下方的内容一样高。</p><p>要使页脚粘在底部，请添加：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> auto 1fr auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>1fr</code>页眉和页脚内容设置为自动采用其子项的大小，并将剩余空间 ( <code>1fr</code> ) 应用于主区域，而 auto 调整大小的行将采用其子项的最小内容的大小，以便该内容大小增加，行本身将增长以进行调整。</p><h4 id="_05-经典圣杯布局-grid-template-auto-1fr-auto-auto-1fr-auto" tabindex="-1"><a class="header-anchor" href="#_05-经典圣杯布局-grid-template-auto-1fr-auto-auto-1fr-auto" aria-hidden="true">#</a> 05. 经典圣杯布局：<code>grid-template: auto 1fr auto / auto 1fr auto</code></h4><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于经典的圣杯布局，有页眉、页脚、左侧边栏、右侧边栏和主要内容。类似于以前的布局，但现在有侧边栏！</p><p>要使用一行代码编写整个网格，请使用 grid-template 属性。这使您可以同时设置行和列。</p><p>属性和值对为：<code>grid-template: auto 1fr auto / auto 1fr auto </code>。第一个和第二个以空格分隔的列表之间的斜线是行和列之间的分隔符。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template</span><span class="token punctuation">:</span> auto 1fr auto / auto 1fr auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与上一个示例一样，页眉和页脚具有自动调整大小的内容，这里的左侧和右侧边栏会根据其子项的固有大小自动调整大小。但是，这次是水平尺寸（宽度）而不是垂直尺寸（高度）。</p><h4 id="_06-12-跨网格-grid-template-columns-repeat-12-1fr" tabindex="-1"><a class="header-anchor" href="#_06-12-跨网格-grid-template-columns-repeat-12-1fr" aria-hidden="true">#</a> 06.<code> 12 跨网格：grid-template-columns: repeat(12, 1fr)</code></h4><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来我们有另一个经典布局：12 跨网格。您可以使用 repeat() 函数在 <code>CSS</code> 中快速编写网格。对网格模板列使用<code> repeat(12, 1fr);</code> 将为每个<code> 1fr</code> 提供 12 列。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>12<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.child-span-12</span> <span class="token punctuation">{</span>
  <span class="token property">grid-column</span><span class="token punctuation">:</span> 1 / 13<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在您有一个 12 列的轨道网格，我们可以将子项放在网格上。一种方法是使用网格线放置它们。例如， grid-column: 1 / 13 将跨越从第一到最后一行（第 13 行）并跨越 12 列。grid-column: 1 / 5; 将跨越前四个列。</p><figure><img src="`+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另一种方法是使用 span 关键字。使用 span ，您可以设置起始线，然后设置从该起点跨越的列数。在这种情况下，grid-column: 1 / span 12 将等效于 grid-column: 1 / 13 ，而 grid-column: 2 / span 6 将等效于 grid-column: 2 / 8 。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.child-span-12</span> <span class="token punctuation">{</span>
  <span class="token property">grid-column</span><span class="token punctuation">:</span> 1 / span 12<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_07-ram-repeat-auto-minmax-grid-template-columns-auto-fit-minmax-1fr" tabindex="-1"><a class="header-anchor" href="#_07-ram-repeat-auto-minmax-grid-template-columns-auto-fit-minmax-1fr" aria-hidden="true">#</a> 07. <code>RAM (Repeat, Auto, MinMax): grid-template-columns(auto-fit, minmax(</code><base><code>, 1fr))</code></h4><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于这第七个示例，结合您已经了解的一些概念来创建具有自动放置且灵活的子项的响应式布局。漂亮整齐。这里要记住的关键点是<code> repeat 、 auto-(fit|fill) 和 minmax()</code> ，可以记住它们的首字母缩写词 RAM。</p><p>总之，应是这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.parent {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您再次使用 repeat ，但这次使用 auto-fit 关键字而不是显式数值。这可以自动放置这些子元素。这些子元素的基本最小值为 <code>150px</code> ，最大值为 <code>1fr </code>，这意味着在较小的屏幕上，它们将占据整个 1 fr 宽度，当它们达到 <code>150px</code> 宽度时，它们将开始流到同一条线上。</p><p>使用 auto-fit ，当它们的水平尺寸超过 <code>150px</code> 时，框将拉伸以填充整个剩余空间。但是，如果您将其更改为 auto-fill ，则当超出 <code>minmax</code> 函数中的基本大小时，它们将不会拉伸：</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.parent</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>150px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_08-排列布局-justify-content-space-between" tabindex="-1"><a class="header-anchor" href="#_08-排列布局-justify-content-space-between" aria-hidden="true">#</a> 08. 排列布局：justify-content: space-between</h4><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于下一个布局，这里要主要说明的是 justify-content: space-between ，它将第一个和最后一个子元素放置在其边界框的边缘，其余空间均匀分布在元素之间。对于这些卡片，它们被放置在 <code>Flexbox</code> 显示模式中，使用 flex-direction: column 将方向设置为 column。</p><p>这会将标题、描述和图像块放在父卡片内的垂直列中。然后，应用 justify-content: space-between 将第一个（标题）和最后一个（图像块）元素锚定到<code> flexbox</code> 的边缘，并且它们之间的描述性文本以相等的间距放置到每个端点。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.parent {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_09-clamp-min-actual-max" tabindex="-1"><a class="header-anchor" href="#_09-clamp-min-actual-max" aria-hidden="true">#</a> 09.clamp(<code>&lt;min&gt;</code>, <code>&lt;actual&gt;</code>, <code>&lt;max&gt;</code>)</h4><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里，我们介绍一些只有少数浏览器支持的技术，但这些技术对布局和响应式 <code>UI</code> 设计有非常令人兴奋的影响。在本演示中，您将使用固定工具设置宽度，如下所示：width: clamp(<code>&lt;min&gt;</code>, <code>&lt;actual&gt;</code>, <code>&lt;max&gt;</code>) 。</p><p>这将设置绝对最小和最大尺寸以及实际尺寸。有了值，应该这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.parent {
  width: clamp(23ch, 60%, 46ch);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的最小尺寸是 <code>23ch</code> 或 23 个字符单元，最大尺寸是 <code>46ch</code> ，46 个字符。字符宽度单位基于元素的字体大小（特别是 0 字形的宽度）。“实际”尺寸为 50%，代表此元素父宽度的 50%。</p><p>在这里， clamp() 函数所做的是使该元素保持 50% 的宽度，直到 50% 大于 <code>46ch </code>（在较宽的视口上）或小于 <code>23ch</code> （在较小的视口上）。您可以看到，当我拉伸和收缩父尺寸时，这张卡片的宽度会增加到其最大限制点并减小到其限制最小点。然后它保持在父级的中心，因为我们已经应用了其他的属性来将它居中。这可以实现更清晰的布局，因为文本不会太宽（超过 <code>46ch</code> ）或太窄（小于 <code>23ch</code>）。</p><p>这也是实现响应式排版的好方法。例如，您可以编写：<code>font-size: clamp(1.5rem, 20vw, 3rem)</code> 。在这种情况下，标题的字体大小将始终保持在<code>1.5rem</code> 和 <code>3rem</code> 之间，但会根据 <code>20vw</code> 实际值增大和缩小以适应视口的宽度。</p><p>这是一种很好的技术，可以通过最小和最大尺寸值确保易读性，但请记住，并非所有现代浏览器都支持它，因此请确保您有回退措施并进行测试。</p><h4 id="_10-保持宽高比-aspect-ratio-width-height" tabindex="-1"><a class="header-anchor" href="#_10-保持宽高比-aspect-ratio-width-height" aria-hidden="true">#</a> 10.保持宽高比：aspect-ratio: <code>&lt;width&gt;</code> / <code>&lt;height&gt;</code></h4><figure><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后要介绍的这一布局工具是最具实验性的工具。它最近在 Chromium 84 中被引入 Chrome Canary，Firefox 正在积极努力实现这一点，但目前还没有任何稳定的浏览器版本。</p><p>不过，我确实想提及这一点，因为这是一个经常遇到的问题。这只是简单地保持图像的宽高比。</p><p>使用 aspect-ratio 属性，当我调整卡片大小时，绿色视觉块保持 16 x 9 的宽高比。我们通过 aspect-ratio: 16 / 9 保持此宽高比。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.video</span> <span class="token punctuation">{</span>
  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 16 / 9<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在没有此属性的情况下保持 16 x 9 的宽高比，需要使用 padding-top hack 并为其提供 56.25% 的 padding 以设置顶宽比。我们很快就会有一个属性来避免黑客攻击和计算百分比的需要。可以使用 1 / 1 的比例制作正方形，使用 2 / 1 制作 <code>2:1</code> 比例。可以设置任何图像缩放比例。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.square</span> <span class="token punctuation">{</span>
  <span class="token property">aspect-ratio</span><span class="token punctuation">:</span> 1 / 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然此功能仍在不断完善中，但它值得了解，因为它解决了许多开发人员面临的冲突，我自己也多次面临，尤其是在视频和<code> iframe</code> 方面。</p>`,77),z={href:"https://www.youtube.com/watch?v=qm0IfG1GyZU",target:"_blank",rel:"noopener noreferrer"},S={href:"https://1linelayouts.glitch.me/",target:"_blank",rel:"noopener noreferrer"},C=n("br",null,null,-1),j={href:"https://blog.csdn.net/qq_56966124/article/details/124225189",target:"_blank",rel:"noopener noreferrer"};function q(I,G){const a=i("ExternalLinkIcon");return c(),o("div",null,[w,n("p",null,[e("完整视频："),n("a",z,[e("https://www.youtube.com/watch?v=qm0IfG1GyZU"),s(a)])]),n("p",null,[e("演示："),n("a",S,[e("https://1linelayouts.glitch.me/"),s(a)])]),n("blockquote",null,[n("p",null,[e("作者：懵懵懂懂学前端"),C,n("a",j,[e("https://blog.csdn.net/qq_56966124/article/details/124225189"),s(a)])])])])}const V=t(y,[["render",q],["__file","如何用一行CSS实现 10 种现代布局.html.vue"]]);export{V as default};
